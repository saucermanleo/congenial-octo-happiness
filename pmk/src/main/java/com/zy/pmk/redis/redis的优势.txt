1.map与redis对比
使用自带的map或者guava实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着jvm的销毁而结束，
并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。

使用redis或memcached之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有
一致性
容量大
持久化 
多实例
丰富的特性

2.redis与其他key-value的软件对比
Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
Redis支持数据的备份，即master-slave模式的数据备份。
性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。
丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。

持久化  主从备份  性能极高  丰富的数据类型  原子(支持事务) 丰富的特性

3.nosql与sql对比
关系型数据库适合存储结构化数据，如用户的帐号、地址：
　　1）这些数据通常需要做结构化查询（嗯，好像是废话），比如join，这时候，关系型数据库就要胜出一筹
　　2）这些数据的规模、增长的速度通常是可以预期的
　　3）事务性、一致性
 
NoSQL适合存储非结构化数据，如文章、评论：
　　1）这些数据通常用于模糊处理，如全文搜索、机器学习
　　2）这些数据是海量的，而且增长的速度是难以预期的，
　　3）根据数据的特点，NoSQL数据库通常具有无限（至少接近）伸缩性
　　4）按key获取数据效率很高，但是对join或其他结构化查询的支持就比较差


4.redis与memcache比较
redis支持持久化,后者不行
redis丰富的数据类型,memcache结构单一
灾难恢复--memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复；
Redis支持数据的备份，即master-slave模式的数据备份；


5.MongoDB 与redis
MongDb是Bson的形式的记录   rdis是key-value的形式
MongDb 丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句
MongDb 适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统
MongDb不支持事务
MongDb海量数据的访问效率提升



4.redis持久化的几种方式

1、快照（snapshots）
　　缺省情况情况下，Redis把数据快照存放在磁盘上的二进制文件中，文件名为dump.rdb。你可以配置Redis的持久化策略，
例如数据集中每N秒钟有超过M次更新，就将数据写入磁盘；或者你可以手工调用命令SAVE或BGSAVE。
　　工作原理
　　． Redis forks.
　　． 子进程开始将数据写到临时RDB文件中。
　　． 当子进程完成写RDB文件，用新文件替换老文件。
　　． 这种方式可以使Redis使用copy-on-write技术。
2、AOF
　　快照模式并不十分健壮，当系统停止，或者无意中Redis被kill掉，最后写入Redis的数据就会丢失。
这对某些应用也许不是大问题，但对于要求高可靠性的应用来说，
　　Redis就不是一个合适的选择。
　　Append-only文件模式是另一种选择。
　　你可以在配置文件中打开AOF模式


Redis最适合所有数据in-momory的场景